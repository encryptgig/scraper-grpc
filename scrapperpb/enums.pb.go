// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.5.1
// source: enums.proto

package scrapperpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type KeyStates int32

const (
	KeyStates_PRE_ACTIVE            KeyStates = 0
	KeyStates_ACTIVE                KeyStates = 1
	KeyStates_DEACTIVATED           KeyStates = 2
	KeyStates_DESTROYED             KeyStates = 3
	KeyStates_DESTROYED_COMPROMISED KeyStates = 4
	KeyStates_COMPROMISED           KeyStates = 5
)

// Enum value maps for KeyStates.
var (
	KeyStates_name = map[int32]string{
		0: "PRE_ACTIVE",
		1: "ACTIVE",
		2: "DEACTIVATED",
		3: "DESTROYED",
		4: "DESTROYED_COMPROMISED",
		5: "COMPROMISED",
	}
	KeyStates_value = map[string]int32{
		"PRE_ACTIVE":            0,
		"ACTIVE":                1,
		"DEACTIVATED":           2,
		"DESTROYED":             3,
		"DESTROYED_COMPROMISED": 4,
		"COMPROMISED":           5,
	}
)

func (x KeyStates) Enum() *KeyStates {
	p := new(KeyStates)
	*p = x
	return p
}

func (x KeyStates) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyStates) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[0].Descriptor()
}

func (KeyStates) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[0]
}

func (x KeyStates) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyStates.Descriptor instead.
func (KeyStates) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{0}
}

type KeyFormatType int32

const (
	KeyFormatType_KeyFormatTypeRaw                        KeyFormatType = 0
	KeyFormatType_KeyFormatTypeOpaque                     KeyFormatType = 1
	KeyFormatType_KeyFormatTypePKCS1                      KeyFormatType = 2
	KeyFormatType_KeyFormatTypePKCS8                      KeyFormatType = 3
	KeyFormatType_KeyFormatTypeX509                       KeyFormatType = 4
	KeyFormatType_KeyFormatTypeECPrivateKey               KeyFormatType = 5
	KeyFormatType_KeyFormatTypeTransparentSymmetricKey    KeyFormatType = 6
	KeyFormatType_KeyFormatTypeTransparentDSAPrivateKey   KeyFormatType = 7
	KeyFormatType_KeyFormatTypeTransparentDSAPublicKey    KeyFormatType = 8
	KeyFormatType_KeyFormatTypeTransparentRSAPrivateKey   KeyFormatType = 9
	KeyFormatType_KeyFormatTypeTransparentRSAPublicKey    KeyFormatType = 10
	KeyFormatType_KeyFormatTypeTransparentDHPrivateKey    KeyFormatType = 11
	KeyFormatType_KeyFormatTypeTransparentDHPublicKey     KeyFormatType = 12
	KeyFormatType_KeyFormatTypeTransparentECDSAPrivateKey KeyFormatType = 13
	KeyFormatType_KeyFormatTypeTransparentECDSAPublicKey  KeyFormatType = 14
	KeyFormatType_KeyFormatTypeTransparentECDHPrivateKey  KeyFormatType = 15
	KeyFormatType_KeyFormatTypeTransparentECDHPublicKey   KeyFormatType = 16
	KeyFormatType_KeyFormatTypeTransparentECMQVPrivateKey KeyFormatType = 17
	KeyFormatType_KeyFormatTypeTransparentECMQVPublicKey  KeyFormatType = 18
	KeyFormatType_KeyFormatTypeTransparentECPrivateKey    KeyFormatType = 19
	KeyFormatType_KeyFormatTypeTransparentECPublicKey     KeyFormatType = 20
	KeyFormatType_KeyFormatTypePKCS12                     KeyFormatType = 21
)

// Enum value maps for KeyFormatType.
var (
	KeyFormatType_name = map[int32]string{
		0:  "KeyFormatTypeRaw",
		1:  "KeyFormatTypeOpaque",
		2:  "KeyFormatTypePKCS1",
		3:  "KeyFormatTypePKCS8",
		4:  "KeyFormatTypeX509",
		5:  "KeyFormatTypeECPrivateKey",
		6:  "KeyFormatTypeTransparentSymmetricKey",
		7:  "KeyFormatTypeTransparentDSAPrivateKey",
		8:  "KeyFormatTypeTransparentDSAPublicKey",
		9:  "KeyFormatTypeTransparentRSAPrivateKey",
		10: "KeyFormatTypeTransparentRSAPublicKey",
		11: "KeyFormatTypeTransparentDHPrivateKey",
		12: "KeyFormatTypeTransparentDHPublicKey",
		13: "KeyFormatTypeTransparentECDSAPrivateKey",
		14: "KeyFormatTypeTransparentECDSAPublicKey",
		15: "KeyFormatTypeTransparentECDHPrivateKey",
		16: "KeyFormatTypeTransparentECDHPublicKey",
		17: "KeyFormatTypeTransparentECMQVPrivateKey",
		18: "KeyFormatTypeTransparentECMQVPublicKey",
		19: "KeyFormatTypeTransparentECPrivateKey",
		20: "KeyFormatTypeTransparentECPublicKey",
		21: "KeyFormatTypePKCS12",
	}
	KeyFormatType_value = map[string]int32{
		"KeyFormatTypeRaw":                        0,
		"KeyFormatTypeOpaque":                     1,
		"KeyFormatTypePKCS1":                      2,
		"KeyFormatTypePKCS8":                      3,
		"KeyFormatTypeX509":                       4,
		"KeyFormatTypeECPrivateKey":               5,
		"KeyFormatTypeTransparentSymmetricKey":    6,
		"KeyFormatTypeTransparentDSAPrivateKey":   7,
		"KeyFormatTypeTransparentDSAPublicKey":    8,
		"KeyFormatTypeTransparentRSAPrivateKey":   9,
		"KeyFormatTypeTransparentRSAPublicKey":    10,
		"KeyFormatTypeTransparentDHPrivateKey":    11,
		"KeyFormatTypeTransparentDHPublicKey":     12,
		"KeyFormatTypeTransparentECDSAPrivateKey": 13,
		"KeyFormatTypeTransparentECDSAPublicKey":  14,
		"KeyFormatTypeTransparentECDHPrivateKey":  15,
		"KeyFormatTypeTransparentECDHPublicKey":   16,
		"KeyFormatTypeTransparentECMQVPrivateKey": 17,
		"KeyFormatTypeTransparentECMQVPublicKey":  18,
		"KeyFormatTypeTransparentECPrivateKey":    19,
		"KeyFormatTypeTransparentECPublicKey":     20,
		"KeyFormatTypePKCS12":                     21,
	}
)

func (x KeyFormatType) Enum() *KeyFormatType {
	p := new(KeyFormatType)
	*p = x
	return p
}

func (x KeyFormatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyFormatType) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[1].Descriptor()
}

func (KeyFormatType) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[1]
}

func (x KeyFormatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyFormatType.Descriptor instead.
func (KeyFormatType) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{1}
}

type CryptoAlgorithm int32

const (
	CryptoAlgorithm_NONE                                   CryptoAlgorithm = 0
	CryptoAlgorithm_CryptographicAlgorithmDES              CryptoAlgorithm = 1
	CryptoAlgorithm_CryptographicAlgorithmDES3             CryptoAlgorithm = 2
	CryptoAlgorithm_CryptographicAlgorithmAES              CryptoAlgorithm = 3
	CryptoAlgorithm_CryptographicAlgorithmRSA              CryptoAlgorithm = 4
	CryptoAlgorithm_CryptographicAlgorithmDSA              CryptoAlgorithm = 5
	CryptoAlgorithm_CryptographicAlgorithmECDSA            CryptoAlgorithm = 6
	CryptoAlgorithm_CryptographicAlgorithmHMACSHA1         CryptoAlgorithm = 7
	CryptoAlgorithm_CryptographicAlgorithmHMACSHA224       CryptoAlgorithm = 8
	CryptoAlgorithm_CryptographicAlgorithmHMACSHA256       CryptoAlgorithm = 9
	CryptoAlgorithm_CryptographicAlgorithmHMACSHA384       CryptoAlgorithm = 10
	CryptoAlgorithm_CryptographicAlgorithmHMACSHA512       CryptoAlgorithm = 11
	CryptoAlgorithm_CryptographicAlgorithmHMACMD5          CryptoAlgorithm = 12
	CryptoAlgorithm_CryptographicAlgorithmDH               CryptoAlgorithm = 13
	CryptoAlgorithm_CryptographicAlgorithmECDH             CryptoAlgorithm = 14
	CryptoAlgorithm_CryptographicAlgorithmECMQV            CryptoAlgorithm = 15
	CryptoAlgorithm_CryptographicAlgorithmBlowfish         CryptoAlgorithm = 16
	CryptoAlgorithm_CryptographicAlgorithmCamellia         CryptoAlgorithm = 17
	CryptoAlgorithm_CryptographicAlgorithmCAST5            CryptoAlgorithm = 18
	CryptoAlgorithm_CryptographicAlgorithmIDEA             CryptoAlgorithm = 19
	CryptoAlgorithm_CryptographicAlgorithmMARS             CryptoAlgorithm = 20
	CryptoAlgorithm_CryptographicAlgorithmRC2              CryptoAlgorithm = 21
	CryptoAlgorithm_CryptographicAlgorithmRC4              CryptoAlgorithm = 22
	CryptoAlgorithm_CryptographicAlgorithmRC5              CryptoAlgorithm = 23
	CryptoAlgorithm_CryptographicAlgorithmSKIPJACK         CryptoAlgorithm = 24
	CryptoAlgorithm_CryptographicAlgorithmTwofish          CryptoAlgorithm = 25
	CryptoAlgorithm_CryptographicAlgorithmEC               CryptoAlgorithm = 26
	CryptoAlgorithm_CryptographicAlgorithmOneTimePad       CryptoAlgorithm = 27
	CryptoAlgorithm_CryptographicAlgorithmChaCha20         CryptoAlgorithm = 28
	CryptoAlgorithm_CryptographicAlgorithmPoly1305         CryptoAlgorithm = 29
	CryptoAlgorithm_CryptographicAlgorithmChaCha20Poly1305 CryptoAlgorithm = 30
	CryptoAlgorithm_CryptographicAlgorithmSHA3224          CryptoAlgorithm = 31
	CryptoAlgorithm_CryptographicAlgorithmSHA3256          CryptoAlgorithm = 32
	CryptoAlgorithm_CryptographicAlgorithmSHA3384          CryptoAlgorithm = 33
	CryptoAlgorithm_CryptographicAlgorithmSHA3512          CryptoAlgorithm = 34
	CryptoAlgorithm_CryptographicAlgorithmHMACSHA3224      CryptoAlgorithm = 35
	CryptoAlgorithm_CryptographicAlgorithmHMACSHA3256      CryptoAlgorithm = 36
	CryptoAlgorithm_CryptographicAlgorithmHMACSHA3384      CryptoAlgorithm = 37
	CryptoAlgorithm_CryptographicAlgorithmHMACSHA3512      CryptoAlgorithm = 38
	CryptoAlgorithm_CryptographicAlgorithmSHAKE128         CryptoAlgorithm = 39
	CryptoAlgorithm_CryptographicAlgorithmSHAKE256         CryptoAlgorithm = 40
)

// Enum value maps for CryptoAlgorithm.
var (
	CryptoAlgorithm_name = map[int32]string{
		0:  "NONE",
		1:  "CryptographicAlgorithmDES",
		2:  "CryptographicAlgorithmDES3",
		3:  "CryptographicAlgorithmAES",
		4:  "CryptographicAlgorithmRSA",
		5:  "CryptographicAlgorithmDSA",
		6:  "CryptographicAlgorithmECDSA",
		7:  "CryptographicAlgorithmHMACSHA1",
		8:  "CryptographicAlgorithmHMACSHA224",
		9:  "CryptographicAlgorithmHMACSHA256",
		10: "CryptographicAlgorithmHMACSHA384",
		11: "CryptographicAlgorithmHMACSHA512",
		12: "CryptographicAlgorithmHMACMD5",
		13: "CryptographicAlgorithmDH",
		14: "CryptographicAlgorithmECDH",
		15: "CryptographicAlgorithmECMQV",
		16: "CryptographicAlgorithmBlowfish",
		17: "CryptographicAlgorithmCamellia",
		18: "CryptographicAlgorithmCAST5",
		19: "CryptographicAlgorithmIDEA",
		20: "CryptographicAlgorithmMARS",
		21: "CryptographicAlgorithmRC2",
		22: "CryptographicAlgorithmRC4",
		23: "CryptographicAlgorithmRC5",
		24: "CryptographicAlgorithmSKIPJACK",
		25: "CryptographicAlgorithmTwofish",
		26: "CryptographicAlgorithmEC",
		27: "CryptographicAlgorithmOneTimePad",
		28: "CryptographicAlgorithmChaCha20",
		29: "CryptographicAlgorithmPoly1305",
		30: "CryptographicAlgorithmChaCha20Poly1305",
		31: "CryptographicAlgorithmSHA3224",
		32: "CryptographicAlgorithmSHA3256",
		33: "CryptographicAlgorithmSHA3384",
		34: "CryptographicAlgorithmSHA3512",
		35: "CryptographicAlgorithmHMACSHA3224",
		36: "CryptographicAlgorithmHMACSHA3256",
		37: "CryptographicAlgorithmHMACSHA3384",
		38: "CryptographicAlgorithmHMACSHA3512",
		39: "CryptographicAlgorithmSHAKE128",
		40: "CryptographicAlgorithmSHAKE256",
	}
	CryptoAlgorithm_value = map[string]int32{
		"NONE":                                   0,
		"CryptographicAlgorithmDES":              1,
		"CryptographicAlgorithmDES3":             2,
		"CryptographicAlgorithmAES":              3,
		"CryptographicAlgorithmRSA":              4,
		"CryptographicAlgorithmDSA":              5,
		"CryptographicAlgorithmECDSA":            6,
		"CryptographicAlgorithmHMACSHA1":         7,
		"CryptographicAlgorithmHMACSHA224":       8,
		"CryptographicAlgorithmHMACSHA256":       9,
		"CryptographicAlgorithmHMACSHA384":       10,
		"CryptographicAlgorithmHMACSHA512":       11,
		"CryptographicAlgorithmHMACMD5":          12,
		"CryptographicAlgorithmDH":               13,
		"CryptographicAlgorithmECDH":             14,
		"CryptographicAlgorithmECMQV":            15,
		"CryptographicAlgorithmBlowfish":         16,
		"CryptographicAlgorithmCamellia":         17,
		"CryptographicAlgorithmCAST5":            18,
		"CryptographicAlgorithmIDEA":             19,
		"CryptographicAlgorithmMARS":             20,
		"CryptographicAlgorithmRC2":              21,
		"CryptographicAlgorithmRC4":              22,
		"CryptographicAlgorithmRC5":              23,
		"CryptographicAlgorithmSKIPJACK":         24,
		"CryptographicAlgorithmTwofish":          25,
		"CryptographicAlgorithmEC":               26,
		"CryptographicAlgorithmOneTimePad":       27,
		"CryptographicAlgorithmChaCha20":         28,
		"CryptographicAlgorithmPoly1305":         29,
		"CryptographicAlgorithmChaCha20Poly1305": 30,
		"CryptographicAlgorithmSHA3224":          31,
		"CryptographicAlgorithmSHA3256":          32,
		"CryptographicAlgorithmSHA3384":          33,
		"CryptographicAlgorithmSHA3512":          34,
		"CryptographicAlgorithmHMACSHA3224":      35,
		"CryptographicAlgorithmHMACSHA3256":      36,
		"CryptographicAlgorithmHMACSHA3384":      37,
		"CryptographicAlgorithmHMACSHA3512":      38,
		"CryptographicAlgorithmSHAKE128":         39,
		"CryptographicAlgorithmSHAKE256":         40,
	}
)

func (x CryptoAlgorithm) Enum() *CryptoAlgorithm {
	p := new(CryptoAlgorithm)
	*p = x
	return p
}

func (x CryptoAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[2].Descriptor()
}

func (CryptoAlgorithm) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[2]
}

func (x CryptoAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoAlgorithm.Descriptor instead.
func (CryptoAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{2}
}

var File_enums_proto protoreflect.FileDescriptor

var file_enums_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x70, 0x62, 0x2a, 0x73, 0x0a, 0x09, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x45, 0x44, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xc0,
	0x06, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x61, 0x77, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x4b, 0x43, 0x53, 0x31, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x4b, 0x43, 0x53, 0x38, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x58, 0x35, 0x30, 0x39, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x10, 0x06, 0x12,
	0x29, 0x0a, 0x25, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x53, 0x41, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x65,
	0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x53, 0x41, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x53, 0x41, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x10, 0x09, 0x12,
	0x28, 0x0a, 0x24, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x53, 0x41, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x65, 0x79,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x48, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x10, 0x0b, 0x12, 0x27, 0x0a, 0x23, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x48, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x10, 0x0c, 0x12, 0x2b, 0x0a, 0x27,
	0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x43, 0x44, 0x53, 0x41, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x10, 0x0d, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x65, 0x79,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x43, 0x44, 0x53, 0x41, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x10, 0x0e, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x43, 0x44, 0x48, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x10,
	0x0f, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x43, 0x44,
	0x48, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x10, 0x10, 0x12, 0x2b, 0x0a, 0x27,
	0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x43, 0x4d, 0x51, 0x56, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x10, 0x11, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x65, 0x79,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x43, 0x4d, 0x51, 0x56, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x10, 0x12, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x10, 0x13, 0x12,
	0x27, 0x0a, 0x23, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x43, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x65, 0x79, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x4b, 0x43, 0x53, 0x31, 0x32, 0x10,
	0x15, 0x2a, 0x8b, 0x0b, 0x0a, 0x0f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x44, 0x45, 0x53, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x44, 0x45, 0x53, 0x33, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x41, 0x45, 0x53, 0x10, 0x03, 0x12, 0x1d, 0x0a,
	0x19, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x53, 0x41, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x44, 0x53, 0x41, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x45, 0x43, 0x44, 0x53, 0x41, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x48, 0x41, 0x31, 0x10, 0x07,
	0x12, 0x24, 0x0a, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x48,
	0x41, 0x32, 0x32, 0x34, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x48, 0x4d, 0x41, 0x43, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x4d, 0x41, 0x43,
	0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x48, 0x4d, 0x41, 0x43, 0x4d, 0x44, 0x35, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x44, 0x48, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x45, 0x43, 0x44, 0x48, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x45, 0x43, 0x4d, 0x51, 0x56, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x42, 0x6c, 0x6f, 0x77, 0x66, 0x69, 0x73, 0x68, 0x10, 0x10, 0x12, 0x22,
	0x0a, 0x1e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x43, 0x61, 0x6d, 0x65, 0x6c, 0x6c, 0x69, 0x61,
	0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x43, 0x41, 0x53, 0x54,
	0x35, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x44, 0x45,
	0x41, 0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4d, 0x41, 0x52,
	0x53, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x43, 0x32,
	0x10, 0x15, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x43, 0x34, 0x10,
	0x16, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x43, 0x35, 0x10, 0x17,
	0x12, 0x22, 0x0a, 0x1e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x4b, 0x49, 0x50, 0x4a, 0x41,
	0x43, 0x4b, 0x10, 0x18, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x77,
	0x6f, 0x66, 0x69, 0x73, 0x68, 0x10, 0x19, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x45, 0x43, 0x10, 0x1a, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4f,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x64, 0x10, 0x1b, 0x12, 0x22, 0x0a, 0x1e, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x43, 0x68, 0x61, 0x43, 0x68, 0x61, 0x32, 0x30, 0x10, 0x1c, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x50, 0x6f, 0x6c, 0x79, 0x31, 0x33, 0x30,
	0x35, 0x10, 0x1d, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x43, 0x68, 0x61,
	0x43, 0x68, 0x61, 0x32, 0x30, 0x50, 0x6f, 0x6c, 0x79, 0x31, 0x33, 0x30, 0x35, 0x10, 0x1e, 0x12,
	0x21, 0x0a, 0x1d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x48, 0x41, 0x33, 0x32, 0x32, 0x34,
	0x10, 0x1f, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x48, 0x41, 0x33,
	0x32, 0x35, 0x36, 0x10, 0x20, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53,
	0x48, 0x41, 0x33, 0x33, 0x38, 0x34, 0x10, 0x21, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x53, 0x48, 0x41, 0x33, 0x35, 0x31, 0x32, 0x10, 0x22, 0x12, 0x25, 0x0a, 0x21, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x48, 0x41, 0x33, 0x32, 0x32, 0x34,
	0x10, 0x23, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x4d, 0x41, 0x43,
	0x53, 0x48, 0x41, 0x33, 0x32, 0x35, 0x36, 0x10, 0x24, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x48, 0x41, 0x33, 0x33, 0x38, 0x34, 0x10, 0x25,
	0x12, 0x25, 0x0a, 0x21, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x48,
	0x41, 0x33, 0x35, 0x31, 0x32, 0x10, 0x26, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x31, 0x32, 0x38, 0x10, 0x27, 0x12, 0x22, 0x0a, 0x1e, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x32, 0x35, 0x36, 0x10, 0x28, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_enums_proto_rawDescOnce sync.Once
	file_enums_proto_rawDescData = file_enums_proto_rawDesc
)

func file_enums_proto_rawDescGZIP() []byte {
	file_enums_proto_rawDescOnce.Do(func() {
		file_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_enums_proto_rawDescData)
	})
	return file_enums_proto_rawDescData
}

var file_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_enums_proto_goTypes = []interface{}{
	(KeyStates)(0),       // 0: scrapperpb.KeyStates
	(KeyFormatType)(0),   // 1: scrapperpb.KeyFormatType
	(CryptoAlgorithm)(0), // 2: scrapperpb.CryptoAlgorithm
}
var file_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enums_proto_init() }
func file_enums_proto_init() {
	if File_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enums_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enums_proto_goTypes,
		DependencyIndexes: file_enums_proto_depIdxs,
		EnumInfos:         file_enums_proto_enumTypes,
	}.Build()
	File_enums_proto = out.File
	file_enums_proto_rawDesc = nil
	file_enums_proto_goTypes = nil
	file_enums_proto_depIdxs = nil
}
